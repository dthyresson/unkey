import { MiddlewareRequest, MiddlewareResponse } from "@redwoodjs/vite/middleware";
import { Ratelimit } from "@unkey/ratelimit";
import type { RatelimitConfig, RatelimitResponse } from "@unkey/ratelimit";
import { assert, describe, expect, it, vi } from "vitest";
import withUnkey from "../index";
import type { withUnkeyOptions } from "../index";

/**
 * Mock the Ratelimit class
 *
 * Use namespace to store the ratelimit identifier that determines if the rate limit is exceeded
 *
 * If namespace matches the identifier generated by withUnkey middlewate, the rate limit is exceeded
 * and the response status is 429 because success is false
 */
vi.mock("@unkey/ratelimit", () => {
  let rateLimitIdentifier = "";

  return {
    Ratelimit: class {
      constructor(config: RatelimitConfig) {
        console.debug(">>>> in Ratelimit constructor", config);
        rateLimitIdentifier = config.namespace;
      }
      limit(identifier: string): Promise<RatelimitResponse> {
        console.debug(">>>> in limit", identifier);
        return Promise.resolve({
          success: identifier === rateLimitIdentifier,
          limit: 0,
          remaining: 0,
          reset: 0,
        });
      }
    },
  };
});

describe("withUnkey", () => {
  it("should pass response through as path does not match", async () => {
    const options: withUnkeyOptions = {
      ratelimitConfig: {
        rootKey: "foo",
        namespace: "192.168.1.1",
        limit: 1,
        duration: "30s",
        async: true,
      },
      matcher: ["/api/user"],
    };
    const unkeyMiddleware = withUnkey(options);
    const request = new Request("http://localhost:8910/api/no/match");
    const req = new MiddlewareRequest(request);
    const res = new MiddlewareResponse("PASS THROUGH OK", { status: 200 });
    const result = await unkeyMiddleware(req, res);
    expect(result.status).toBe(200);
    expect(result.body).toBe("PASS THROUGH OK");
  });

  it("should work", async () => {
    const options: withUnkeyOptions = {
      ratelimitConfig: {
        rootKey: "foo",
        namespace: "192.168.1.1",
        limit: 1,
        duration: "30s",
        async: true,
      },
      matcher: ["/api/user"],
    };
    const unkeyMiddleware = withUnkey(options);
    const request = new Request("http://localhost:8910/api/user");
    const req = new MiddlewareRequest(request);
    const res = new MiddlewareResponse();
    const result = await unkeyMiddleware(req, res);
    expect(result.status).toBe(200);
  });

  it("should be limited", async () => {
    // here the namespace will cause the rate limit to be exceeded because it does not match the identifier
    // generated by the withUnkey middleware
    const options: withUnkeyOptions = {
      ratelimitConfig: {
        rootKey: "foo",
        namespace: "my-app",
        limit: 1,
        duration: "30s",
        async: true,
      },
      matcher: ["/api/user"],
    };
    const unkeyMiddleware = withUnkey(options);
    const request = new Request("http://localhost:8910/api/user");
    const req = new MiddlewareRequest(request);
    const res = new MiddlewareResponse();
    const result = await unkeyMiddleware(req, res);
    expect(result.status).toBe(429);
  });

  it("should be not limited with a custom default identifier function", async () => {
    // here the namespace will cause the rate limit to be exceeded because it does not match the identifier
    // generated by the withUnkey middleware
    const options: withUnkeyOptions = {
      ratelimitConfig: {
        rootKey: "foo",
        namespace: "abcdefg",
        limit: 1,
        duration: "30s",
        async: true,
      },
      matcher: ["/api/user"],
      ratelimitIdentifierFn: (_req: MiddlewareRequest) => {
        return "abcdefg";
      },
    };
    const unkeyMiddleware = withUnkey(options);
    const request = new Request("http://localhost:8910/api/user");
    const req = new MiddlewareRequest(request);
    const res = new MiddlewareResponse();
    const result = await unkeyMiddleware(req, res);
    expect(result.status).toBe(200);
  });

  it("should be limited with a custom default identifier function", async () => {
    // here the namespace will cause the rate limit to be exceeded because it does not match the identifier
    // generated by the withUnkey middleware
    const options: withUnkeyOptions = {
      ratelimitConfig: {
        rootKey: "foo",
        namespace: "12345",
        limit: 1,
        duration: "30s",
        async: true,
      },
      matcher: ["/api/user"],
      ratelimitIdentifierFn: (_req: MiddlewareRequest) => {
        return "abcdefg";
      },
    };
    const unkeyMiddleware = withUnkey(options);
    const request = new Request("http://localhost:8910/api/user");
    const req = new MiddlewareRequest(request);
    const res = new MiddlewareResponse();
    const result = await unkeyMiddleware(req, res);
    expect(result.status).toBe(429);
  });

  it("should be limited with a custom rate limit exceeded message function", async () => {
    // here the namespace will cause the rate limit to be exceeded because it does not match the identifier
    // generated by the withUnkey middleware
    const options: withUnkeyOptions = {
      ratelimitConfig: {
        rootKey: "foo",
        namespace: "exceeded",
        limit: 1,
        duration: "30s",
        async: true,
      },
      matcher: ["/api/user"],
      ratelimitExceededResponseFn: (_req: MiddlewareRequest) => {
        return new MiddlewareResponse("Custom Rate limit exceeded message", {
          status: 429,
        });
      },
    };
    const unkeyMiddleware = withUnkey(options);
    const request = new Request("http://localhost:8910/api/user");
    const req = new MiddlewareRequest(request);
    const res = new MiddlewareResponse();
    const result = await unkeyMiddleware(req, res);
    expect(result.status).toBe(429);
    expect(result.body).toBe("Custom Rate limit exceeded message");
  });

  it("should error", async () => {
    // here the namespace will cause the rate limit to be exceeded because it does not match the identifier
    // generated by the withUnkey middleware
    const options: withUnkeyOptions = {
      ratelimitConfig: {
        rootKey: "foo",
        namespace: "exceeded",
        limit: 1,
        duration: "30s",
        async: true,
      },
      matcher: ["/api/user"],
      ratelimitIdentifierFn: (_req: MiddlewareRequest) => {
        console.debug(">>>> in ratelimitIdentifierFn");
        throw new Error("Error simulated by test");
      },
      ratelimitErrorResponseFn: (_req: MiddlewareRequest) => {
        console.debug(">>>> in ratelimitErrorResponseFn");
        return new MiddlewareResponse("Custom Error message when rate limiting", {
          status: 500,
        });
      },
    };
    const unkeyMiddleware = withUnkey(options);
    const request = new Request("http://localhost:8910/api/user");
    const req = new MiddlewareRequest(request);
    const res = new MiddlewareResponse();
    const result = await unkeyMiddleware(req, res);

    expect(result.body).toBe("Custom Error message when rate limiting");
    expect(result.status).toBe(500);
  });
});
